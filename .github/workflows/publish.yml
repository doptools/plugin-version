name: Publish

on:
  push:
    tags:
      - v*.*.*
      - v*.*.*-*.*

jobs:
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/

  publish:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: "14"
          registry-url: https://npm.pkg.github.com/
          always-auth: true
          scope: "doptools"

      - name: Parse Version
        id: version
        uses: doptools/action-parse-semver@main
        with:
          version: "${{ github.ref }}"
          versionRegex: '\/v(.*)$'

      - name: Config
        id: config
        run: |
          if [ -z "${{ steps.version.outputs.prerelease }}" ]; then
             echo "::set-output name=tarPath::./dist/dops-v${{ steps.version.outputs.full }}/dops-v${{ steps.version.outputs.full }}"
           else
             echo "::set-output name=tarPath::./dist/channels/${{ steps.version.outputs.prereleaseId }}/dops-v${{ steps.version.outputs.full }}/dops-v${{ steps.version.outputs.full }}"
           fi

      - name: Install
        run: yarn install

      - name: Set Version
        run: yarn version --no-git-tag-version --new-version ${{ steps.version.outputs.full }}

      - name: Create Autoupdates 
        run: npx @oclif/dev-cli pack

      - name: Publish
        env:
          NODE_AUTH_TOKEN: ${{ github.token }}
        run: yarn publish --access restricted

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: |
            Generated Release ${{ github.ref }}
          draft: false
          prerelease: ${{ steps.config.outputs.isPrerelease }}

      - name: Upload Release Asset
        id: upload-release-asset 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ github.token }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ${{ steps.config.outputs.tarPath }}.tar.gz
          asset_name: dops-cli-${{ steps.version.outputs.full }}.tar.gz
          asset_content_type: application/gzip
